name: "Go Cross Action"
description: "A configurable GitHub Action to build Go projects with cross-compilation support"

branding:
  icon: "play"
  color: "green"

inputs:
  command:
    description: "Command to execute (build, run, test, bench)"
    required: false
    default: "build"
  source-dir:
    description: "The directory containing the Go project to build"
    required: false
    default: ${{ github.workspace }}
  result-dir:
    description: "The directory to store build results"
    required: false
  build-config:
    description: "The path to the build configuration file"
    required: false
  buildmode:
    description: "Build mode (default, archive, shared, c-archive, c-shared)"
    required: false
  bin-name:
    description: "Name of the output binary"
    required: false
  bin-name-no-suffix:
    description: "Do not append architecture suffix to binary name"
    required: false
  add-go-build-args:
    description: "Additional Go command arguments"
    required: false
  targets:
    description: "Target targets to build for (e.g. linux/amd64,windows/386)"
    required: false
  cgo-enabled:
    description: "Enable CGO"
    default: "0"
    required: false
  force-cgo:
    description: "Force use of CGO"
    required: false
  cc:
    description: "Force set the specific C compiler"
    required: false
  cxx:
    description: "Force set the specific C++ compiler"
    required: false
  use-default-cc-cxx:
    description: "Use the default C and C++ compilers"
    required: false
  cgo-flags:
    description: "CGO compiler flags"
    required: false
  cgo-ldflags:
    description: "CGO linker flags"
    required: false
  ldflags:
    description: "Go linker flags"
    required: false
  ext-ldflags:
    description: "External linker flags"
    required: false
  tags:
    description: "Build tags"
    required: false
  github-proxy-mirror:
    description: "GitHub proxy mirror URL for downloading cross compilers"
    required: false
  cross-compiler-dir:
    description: "Directory to store cross compilers"
    required: false
  ndk-version:
    description: "Android NDK version for Android builds"
    required: false
  go-clean-cache:
    description: "Clean Go build cache before building"
    required: false
  enable-micro:
    description: "Enable building micro architecture variants"
    required: false
  show-all-targets:
    description: "Show all supported targets"
    required: false
    default: "false"
  race:
    description: "enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, darwin/arm64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA)."
    required: false
  a:
    description: "force rebuilding of packages that are already up-to-date."
    required: false
  n:
    description: "print the commands but do not run them."
    required: false
  x:
    description: "print the commands."
    required: false
  v:
    description: "print the names of packages as they are compiled."
    required: false
  work:
    description: "print the name of the temporary work directory and do not delete it when exiting."
    required: false
  p:
    description: "the number of programs that can be run in parallel."
    required: false
  msan:
    description: "enable interoperation with memory sanitizer."
    required: false
  asan:
    description: "enable interoperation with address sanitizer."
    required: false
  cover:
    description: "enable code coverage instrumentation."
    required: false
  covermode:
    description: "set the mode for coverage analysis (set, count, atomic)."
    required: false
  coverpkg:
    description: "apply coverage analysis to packages matching pattern."
    required: false
  asmflags:
    description: "arguments to pass on each go tool asm invocation."
    required: false
  buildvcs:
    description: "whether to stamp binaries with version control information."
    required: false
  compiler:
    description: "name of compiler to use (gccgo or gc)."
    required: false
  gccgoflags:
    description: "arguments to pass on each gccgo compiler/linker invocation."
    required: false
  gcflags:
    description: "arguments to pass on each go tool compile invocation."
    required: false
  installsuffix:
    description: "a suffix to use in the name of the package installation directory."
    required: false
  json:
    description: "emit build output in JSON format."
    required: false
  linkshared:
    description: "build code that will be linked against shared libraries."
    required: false
  mod:
    description: "module download mode (readonly, vendor, or mod)."
    required: false
  modcacherw:
    description: "leave newly-created directories in the module cache read-write."
    required: false
  modfile:
    description: "read an alternate go.mod file."
    required: false
  overlay:
    description: "read a JSON config file that provides an overlay for build operations."
    required: false
  pgo:
    description: "specify the file path of a profile for profile-guided optimization."
    required: false
  pkgdir:
    description: "install and load all packages from dir."
    required: false
  trimpath:
    description: "remove all file system paths from the resulting executable."
    required: false
  toolexec:
    description: "a program to use to invoke toolchain programs."
    required: false
  change-dir:
    description: "change to dir before running the command."
    required: false
  use-gnu-libc:
    description: "use GNU libc instead of musl for Linux targets."
    required: false
  apple-simulator:
    description: "build for Apple simulator (iOS/tvOS/watchOS)."
    required: false
  api:
    description: "Android API level for Android builds (default: 24)."
    required: false
  cgo-deps-version:
    description: "CGO dependencies version."
    required: false
  package:
    description: "package path to build (default: current directory)."
    required: false
  config-args:
    description: "Additional build configuration arguments"
    required: false

outputs:
  targets:
    description: "All supported targets"
    value: ${{ steps.get_targets.outputs.targets }}

runs:
  using: "composite"
  steps:
    - name: Show all targets
      if: ${{ inputs.show-all-targets == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        "${{ github.action_path }}/cross.sh" --show-all-targets

    - name: Execute Go Command
      id: execute
      if: ${{ inputs.show-all-targets == 'false' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      env:
        COMMAND: ${{ inputs.command }}
        BUILD_CONFIG: ${{ inputs.build-config }}
        CGO_ENABLED: ${{ inputs.cgo-enabled }}
        RESULT_DIR: ${{ inputs.result-dir }}
        BUILDMODE: ${{ inputs.buildmode }}
        BIN_NAME: ${{ inputs.bin-name }}
        BIN_NAME_NO_SUFFIX: ${{ inputs.bin-name-no-suffix }}
        ADD_GO_BUILD_ARGS: ${{ inputs.add-go-build-args }}
        PLATFORMS: ${{ inputs.targets }}
        FORCE_CGO: ${{ inputs.force-cgo }}
        CC: ${{ inputs.cc }}
        CXX: ${{ inputs.cxx }}
        USE_DEFAULT_CC_CXX: ${{ inputs.use-default-cc-cxx }}
        CGO_FLAGS: ${{ inputs.cgo-flags }}
        CGO_LDFLAGS: ${{ inputs.cgo-ldflags }}
        LDFLAGS: ${{ inputs.ldflags }}
        EXT_LDFLAGS: ${{ inputs.ext-ldflags }}
        BUILD_TAGS: ${{ inputs.tags }}
        GH_PROXY: ${{ inputs.github-proxy-mirror }}
        CROSS_COMPILER_DIR: ${{ inputs.cross-compiler-dir }}
        NDK_VERSION: ${{ inputs.ndk-version }}
        GO_CLEAN_CACHE: ${{ inputs.go-clean-cache }}
        ENABLE_MICRO: ${{ inputs.enable-micro }}
        GO_RACE: ${{ inputs.race }}
        GO_A: ${{ inputs.a }}
        GO_N: ${{ inputs.n }}
        GO_X: ${{ inputs.x }}
        GO_V: ${{ inputs.v }}
        GO_WORK: ${{ inputs.work }}
        GO_P: ${{ inputs.p }}
        GO_MSAN: ${{ inputs.msan }}
        GO_ASAN: ${{ inputs.asan }}
        GO_COVER: ${{ inputs.cover }}
        GO_COVERMODE: ${{ inputs.covermode }}
        GO_COVERPKG: ${{ inputs.coverpkg }}
        GO_ASMFLAGS: ${{ inputs.asmflags }}
        GO_BUILDVCS: ${{ inputs.buildvcs }}
        GO_COMPILER: ${{ inputs.compiler }}
        GO_GCCGOFLAGS: ${{ inputs.gccgoflags }}
        GO_GCFLAGS: ${{ inputs.gcflags }}
        GO_INSTALLSUFFIX: ${{ inputs.installsuffix }}
        GO_JSON: ${{ inputs.json }}
        GO_LINKSHARED: ${{ inputs.linkshared }}
        GO_MOD: ${{ inputs.mod }}
        GO_MODCACHERW: ${{ inputs.modcacherw }}
        GO_MODFILE: ${{ inputs.modfile }}
        GO_OVERLAY: ${{ inputs.overlay }}
        GO_PGO: ${{ inputs.pgo }}
        GO_PKGDIR: ${{ inputs.pkgdir }}
        GO_TRIMPATH: ${{ inputs.trimpath }}
        GO_TOOLEXEC: ${{ inputs.toolexec }}
        GO_CHANGE_DIR: ${{ inputs.change-dir }}
        USE_GNU_LIBC: ${{ inputs.use-gnu-libc }}
        APPLE_SIMULATOR: ${{ inputs.apple-simulator }}
        API: ${{ inputs.api }}
        CGO_DEPS_VERSION: ${{ inputs.cgo-deps-version }}
        PACKAGE: ${{ inputs.package }}
      run: |
        "${{ github.action_path }}/cross.sh" ${{ inputs.config-args }}
