name: "Go Cross Build"
description: "A configurable GitHub Action to build Go projects with cross-compilation support"

branding:
  icon: "play"
  color: "green"

inputs:
  source-dir:
    description: "The directory containing the Go project to build"
    required: false
    default: ${{ github.workspace }}
  result-dir:
    description: "The directory to store build results"
    required: false
  build-config:
    description: "The path to the build configuration file"
    required: false
  buildmode:
    description: "Build mode (default, archive, shared, c-archive, c-shared)"
    required: false
  bin-name:
    description: "Name of the output binary"
    required: false
  bin-name-no-suffix:
    description: "Do not append architecture suffix to binary name"
    required: false
  add-go-build-args:
    description: "Additional Go command arguments"
    required: false
  targets:
    description: "Target targets to build for (e.g. linux/amd64,windows/386)"
    required: false
  cgo-enabled:
    description: "Enable CGO"
    required: false
  force-cgo:
    description: "Force use of CGO"
    required: false
  cc:
    description: "Force set the specific C compiler"
    required: false
  cxx:
    description: "Force set the specific C++ compiler"
    required: false
  use-default-cc-cxx:
    description: "Use the default C and C++ compilers"
    required: false
  cgo-flags:
    description: "CGO compiler flags"
    required: false
  cgo-ldflags:
    description: "CGO linker flags"
    required: false
  ldflags:
    description: "Go linker flags"
    required: false
  ext-ldflags:
    description: "External linker flags"
    required: false
  tags:
    description: "Build tags"
    required: false
  github-proxy-mirror:
    description: "GitHub proxy mirror URL for downloading cross compilers"
    required: false
  cross-compiler-dir:
    description: "Directory to store cross compilers"
    required: false
  ndk-version:
    description: "Android NDK version for Android builds"
    required: false
  go-clean-cache:
    description: "Clean Go build cache before building"
    required: false
  enable-micro:
    description: "Enable building micro architecture variants"
    required: false
  show-all-targets:
    description: "Show all supported targets"
    required: false
    default: "false"
  race:
    description: "enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, darwin/arm64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA)."
    required: false
  a:
    description: "force rebuilding of packages that are already up-to-date."
    required: false
  n:
    description: "print the commands but do not run them."
    required: false
  x:
    description: "print the commands."
    required: false
  v:
    description: "print the names of packages as they are compiled."
    required: false
  work:
    description: "print the name of the temporary work directory and do not delete it when exiting."
    required: false
  config-args:
    description: "Additional build configuration arguments"
    required: false

outputs:
  targets:
    description: "All supported targets"
    value: ${{ steps.get_targets.outputs.targets }}

runs:
  using: "composite"
  steps:
    - name: Show all targets
      if: ${{ inputs.show-all-targets == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        "${{ github.action_path }}/cross.sh" --show-all-targets

    - name: Build
      id: build
      if: ${{ inputs.show-all-targets == 'false' }}
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      env:
        BUILD_CONFIG: ${{ inputs.build-config }}
        CGO_ENABLED: ${{ inputs.cgo-enabled }}
        INPUT_RESULT_DIR: ${{ inputs.result-dir }}
        INPUT_BUILDMODE: ${{ inputs.buildmode }}
        INPUT_BIN_NAME: ${{ inputs.bin-name }}
        INPUT_BIN_NAME_NO_SUFFIX: ${{ inputs.bin-name-no-suffix }}
        INPUT_ADD_GO_BUILD_ARGS: ${{ inputs.add-go-build-args }}
        INPUT_TARGETS: ${{ inputs.targets }}
        INPUT_FORCE_CGO: ${{ inputs.force-cgo }}
        INPUT_CC: ${{ inputs.cc }}
        INPUT_CXX: ${{ inputs.cxx }}
        INPUT_USE_DEFAULT_CC_CXX: ${{ inputs.use-default-cc-cxx }}
        INPUT_CGO_FLAGS: ${{ inputs.cgo-flags }}
        INPUT_CGO_LDFLAGS: ${{ inputs.cgo-ldflags }}
        INPUT_LDFLAGS: ${{ inputs.ldflags }}
        INPUT_EXT_LDFLAGS: ${{ inputs.ext-ldflags }}
        INPUT_TAGS: ${{ inputs.tags }}
        INPUT_GITHUB_PROXY_MIRROR: ${{ inputs.github-proxy-mirror }}
        INPUT_CROSS_COMPILER_DIR: ${{ inputs.cross-compiler-dir }}
        INPUT_NDK_VERSION: ${{ inputs.ndk-version }}
        INPUT_GO_CLEAN_CACHE: ${{ inputs.go-clean-cache }}
        INPUT_ENABLE_MICRO: ${{ inputs.enable-micro }}
        INPUT_RACE: ${{ inputs.race }}
        INPUT_A: ${{ inputs.a }}
        INPUT_N: ${{ inputs.n }}
        INPUT_X: ${{ inputs.x }}
        INPUT_V: ${{ inputs.v }}
        INPUT_WORK: ${{ inputs.work }}
        INPUT_CONFIG_ARGS: ${{ inputs.config-args }}
        ACTION_PATH: ${{ github.action_path }}
        SOURCE_DIR: ${{ inputs.source-dir }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        "$ACTION_PATH/action-wrapper.sh"
