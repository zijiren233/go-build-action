name: "Go Cross Build"
description: "A configurable GitHub Action to build Go projects with cross-compilation support"

branding:
  icon: "play"
  color: "green"

inputs:
  source-dir:
    description: "The directory containing the Go project to build"
    required: false
    default: ${{ github.workspace }}
  result-dir:
    description: "The directory to store build results"
    required: false
  build-config:
    description: "The path to the build configuration file"
    required: false
  buildmode:
    description: "Build mode (default, archive, shared, c-archive, c-shared)"
    required: false
  bin-name:
    description: "Name of the output binary"
    required: false
  bin-name-no-suffix:
    description: "Do not append architecture suffix to binary name"
    required: false
  add-go-build-args:
    description: "Additional Go command arguments"
    required: false
  targets:
    description: "Target targets to build for (e.g. linux/amd64,windows/386)"
    required: false
  cgo-enabled:
    description: "Enable CGO"
    required: false
  force-cgo:
    description: "Force use of CGO"
    required: false
  force-gcc:
    description: "Force specific C compiler"
    required: false
  force-gxx:
    description: "Force specific C++ compiler"
    required: false
  host-gcc:
    description: "Host C compiler path"
    required: false
  host-gxx:
    description: "Host C++ compiler path"
    required: false
  cgo-flags:
    description: "CGO compiler flags"
    required: false
  cgo-ldflags:
    description: "CGO linker flags"
    required: false
  ldflags:
    description: "Go linker flags"
    required: false
  ext-ldflags:
    description: "External linker flags"
    required: false
  tags:
    description: "Build tags"
    required: false
  github-proxy-mirror:
    description: "GitHub proxy mirror URL for downloading cross compilers"
    required: false
  cross-compiler-dir:
    description: "Directory to store cross compilers"
    required: false
  ndk-version:
    description: "Android NDK version for Android builds"
    required: false
  go-clean-cache:
    description: "Clean Go build cache before building"
    required: false
  enable-micro:
    description: "Enable building micro architecture variants"
    required: false
  show-all-targets:
    description: "Show all supported targets"
    required: false
    default: "false"
  flag-race:
    description: "enable data race detection. Supported only on linux/amd64, freebsd/amd64, darwin/amd64, darwin/arm64, windows/amd64, linux/ppc64le and linux/arm64 (only for 48-bit VMA)."
    required: false
  flag-a:
    description: "force rebuilding of packages that are already up-to-date."
    required: false
  flag-n:
    description: "print the commands but do not run them."
    required: false
  flag-x:
    description: "print the commands."
    required: false
  flag-v:
    description: "print the names of packages as they are compiled."
    required: false
  flag-work:
    description: "print the name of the temporary work directory and do not delete it when exiting."
    required: false
  config-args:
    description: "Additional build configuration arguments"
    required: false

outputs:
  targets:
    description: "All supported targets"
    value: ${{ steps.get_targets.outputs.targets }}

runs:
  using: "composite"
  steps:
    - id: build
      if: ${{ inputs.show-all-targets == 'false' }}
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        export SOURCE_DIR="${{ inputs.source-dir }}"
        export BUILD_CONFIG="${{ inputs.build-config }}"
        export CGO_ENABLED="${{ inputs.cgo-enabled == 'true' && '1' || '0' }}"
        "${{ github.action_path }}/build.sh" \
          ${{ inputs.result-dir != '' && format('--result-dir=''{0}''', inputs.result-dir) || '' }} \
          ${{ inputs.buildmode != '' && format('--buildmode=''{0}''', inputs.buildmode) || '' }} \
          ${{ inputs.bin-name != '' && format('--bin-name=''{0}''', inputs.bin-name) || '' }} \
          ${{ inputs.bin-name-no-suffix == 'true' && '--bin-name-no-suffix' || '' }} \
          ${{ inputs.add-go-build-args != '' && format('--add-go-build-args=''{0}''', inputs.add-go-build-args) || '' }} \
          ${{ inputs.targets != '' && format('--targets=''{0}''', inputs.targets) || '' }} \
          ${{ inputs.force-cgo == 'true' && '--force-cgo' || '' }} \
          ${{ inputs.force-gcc != '' && format('--force-gcc=''{0}''', inputs.force-gcc) || '' }} \
          ${{ inputs.force-gxx != '' && format('--force-gxx=''{0}''', inputs.force-gxx) || '' }} \
          ${{ inputs.host-gcc != '' && format('--host-gcc=''{0}''', inputs.host-gcc) || '' }} \
          ${{ inputs.host-gxx != '' && format('--host-gxx=''{0}''', inputs.host-gxx) || '' }} \
          ${{ inputs.cgo-flags != '' && format('--cgo-flags=''{0}''', inputs.cgo-flags) || '' }} \
          ${{ inputs.cgo-ldflags != '' && format('--cgo-ldflags=''{0}''', inputs.cgo-ldflags) || '' }} \
          ${{ inputs.tags != '' && format('--tags=''{0}''', inputs.tags) || '' }} \
          ${{ inputs.ldflags != '' && format('--ldflags=''{0}''', inputs.ldflags) || '' }} \
          ${{ inputs.ext-ldflags != '' && format('--ext-ldflags=''{0}''', inputs.ext-ldflags) || '' }} \
          ${{ inputs.github-proxy-mirror != '' && format('--github-proxy-mirror=''{0}''', inputs.github-proxy-mirror) || '' }} \
          ${{ inputs.cross-compiler-dir != '' && format('--cross-compiler-dir=''{0}''', inputs.cross-compiler-dir) || '' }} \
          ${{ inputs.ndk-version != '' && format('--ndk-version=''{0}''', inputs.ndk-version) || '' }} \
          ${{ inputs.go-clean-cache == 'true' && '--go-clean-cache' || '' }} \
          ${{ inputs.enable-micro == 'true' && '--enable-micro' || '' }} \
          ${{ inputs.flag-race == 'true' && '--add-go-build-args=-race' || '' }} \
          ${{ inputs.flag-a == 'true' && '--add-go-build-args=-a' || '' }} \
          ${{ inputs.flag-n == 'true' && '--add-go-build-args=-n' || '' }} \
          ${{ inputs.flag-x == 'true' && '--add-go-build-args=-x' || '' }} \
          ${{ inputs.flag-v == 'true' && '--add-go-build-args=-v' || '' }} \
          ${{ inputs.flag-work == 'true' && '--add-go-build-args=-work' || '' }} \
          ${{ inputs.config-args != '' && inputs.config-args || '' }}
